"""
Django settings for lbor_v3 project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

from decouple import config
from kombu import Exchange, Queue

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s3f=db02o6ii_hco^ft#9za7vd9!y6la6g2@dmyma@tr_wp0t*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'lbor_v3.apps.lbor_v3UserConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_crontab',
    'debug_toolbar',
    "corsheaders",
    'common',
    'land',
    'building',
    'extra_common',
    'extra_land',
    'extra_building',
    'user',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'bootstrap5',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
    'django_celery_beat',
    'leaflet',
]


# django rest framework API框架設定

REST_FRAMEWORK = {
    "PAGE_SIZE": 100,
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


# drf-spectacular API網頁顯示設定

SPECTACULAR_SETTINGS = {
    'TITLE': 'lbor V3',
    'DESCRIPTION': 'lbor V3',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'], # 預設權限
    # OTHER SETTINGS
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'lbor_v3.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'user/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
LBOR_HOST = 'https://lbor.yeshome.net.tw'

LBOR_HOST = config('LBOR_HOST', default='https://lbor.yeshome.net.tw')
LBOR_INFO_TOKEN = config('LBOR_INFO_TOKEN', default='5cde8fa1-4776-4ad7-8c4f-708167a48c21')
LBOR_TASK_TOKEN = config('LBOR_TASK_TOKEN', default='81fecff7-39af-4a5a-bfc8-f1b3efcbccb1')


SITE_ID = 1
LOGIN_REDIRECT_URL = '/'

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend"
)

SOCIALACCOUNT_PROVIDERS = {
    'line': {
        "SCOPE": ['profile', 'openid', 'email']
    }
}

ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_MAX_EMAIL_ADDRESSES = 1
ACCOUNT_LOGOUT_ON_GET = True


ACCOUNT_ADAPTER = 'user.forms.NoNewUsersAccountAdapter'

WSGI_APPLICATION = 'lbor_v3.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'zh-hant'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_TZ = True


from django.conf.locale.zh_Hant import formats as zh_hant_formats

zh_hant_formats.DATETIME_FORMAT = "Y-n-j H:i:s"
zh_hant_formats.DATE_INPUT_FORMATS[0] = "%Y-%m-%d"
zh_hant_formats.TIME_INPUT_FORMATS[0] = "%H:%M:%S"
zh_hant_formats.DATETIME_INPUT_FORMATS[0] = "%Y-%m-%d %H:%M:%S"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CRONJOBS = [

# ]


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/1", # 指定redis://IP/第幾個DB
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        'KEY_PREFIX': 'Cache'
    }
}

CELERY_BROKER_URL = 'amqp://localhost:5672'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True

# 任務超時直接中止 單位秒
CELERY_TASK_TIME_LIMIT = 30 * 60

# 設定儲存結果過期日期 默認超過1天過期 beat開啟 celery每天會自動清除
# 設為0 結果永不過期
# CELERY_RESULT_EXPIRES = 1

# Worker同時處理數量 一般默認CPU核心數
CELERY_WORKER_CONCURRENCY = 8

# 每個worker 執行多少任務會砍掉 默認0
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_DEFAULT_QUEUE = 'default'
CELERY_DEFAULT_EXCHANGE = 'default'
CELERY_DEFAULT_ROUTING_KEY = 'default'

# CELERY_QUEUES = (
#     Queue('default', Exchange('default'), routing_key='default'),
#     Queue('schedule', Exchange('schedule'), routing_key='schedule'),
#     Queue('long_task', Exchange('long_task'), routing_key='long_task'),
# )

try:
    from local_settings import *
except ImportError:
    pass


# DEBUG 會吃到 local_settings.py 設定

if not os.path.exists('logs'):
    os.makedirs('logs')

LOG_LEVEL = 'INFO'
if DEBUG == True:
    LOG_LEVEL = 'DEBUG'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'normal': {
            'format': '[%(levelname)s] %(asctime)s | %(name)s:%(lineno)d | %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # 色彩log--rich.logging.RichHandler | Default logs to stderr--logging.StreamHandler
            'formatter': 'normal',  # use the above "normal" formatter
            # 'rich_tracebacks': True,  # 錯誤訊息框架
            # 'filters': ['require_debug_true'],  # add filters
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/main.log',
            'maxBytes': 1024*1024*10,
            'backupCount': 10,
            'formatter': 'normal',
        }

    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'building': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'common': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'land': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'user': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'extra_building': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'extra_common': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
        'extra_land': {  # means "root logger"
            'handlers': ['console', 'file'],  # use the above "console" handler
            'level': LOG_LEVEL,  # logging level
        },
    },
}
